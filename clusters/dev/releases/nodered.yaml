apiVersion: apps/v1
kind: Deployment
metadata: { name: nodered, namespace: iot }
spec:
  replicas: 1
  selector: { matchLabels: { app: nodered } }
  template:
    metadata: { labels: { app: nodered } }
    spec:
      containers:
      - name: nodered
        image: docker.io/nodered/node-red:latest
        ports: [{ containerPort: 1880 }]
        env:
          - { name: TZ, value: "Europe/Rome" }
          - name: INFLUX_URL
            valueFrom: { secretKeyRef: { name: influx-writer, key: INFLUX_URL } }
          - name: INFLUX_ORG
            valueFrom: { secretKeyRef: { name: influx-writer, key: INFLUX_ORG } }
          - name: INFLUX_BUCKET
            valueFrom: { secretKeyRef: { name: influx-writer, key: INFLUX_BUCKET } }
          - name: INFLUX_TOKEN
            valueFrom: { secretKeyRef: { name: influx-writer, key: INFLUX_TOKEN } }
          - name: WRITE_PRECISION
            valueFrom: { secretKeyRef: { name: influx-writer, key: WRITE_PRECISION } }
        volumeMounts:
          - { name: data,  mountPath: /data }
          - { name: flows, mountPath: /data/flows.json, subPath: flows.json }
        readinessProbe:
          httpGet: { path: /, port: 1880 }
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: nodered-data }
        - name: flows
          configMap: { name: nodered-flows }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata: { name: nodered-data, namespace: iot }
spec:
  accessModes: [ ReadWriteOnce ]
  resources: { requests: { storage: 1Gi } }
  storageClassName: local-path
---
apiVersion: v1
kind: Service
metadata: { name: nodered, namespace: iot }
spec:
  selector: { app: nodered }
  ports: [{ name: http, port: 1880, targetPort: 1880 }]
